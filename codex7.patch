 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF'
diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index 0d44b879c16d127f32c64e9b25145512b871c4a3..893a52cba3ff4639dc28a851b345fe75be53c545 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -1,22 +1,31 @@
 name: CI
 on:
   push:
   pull_request:

 jobs:
   test:
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v4
       - name: Set up micromamba
         uses: mamba-org/setup-micromamba@v2
         with:
           environment-file: environment.yml
           environment-name: ci
           cache-downloads: true
           cache-env: true
-      - name: Run tests
+      - name: Run tests with coverage
         shell: bash -l {0}
         run: |
           python -V
-          pytest -q
+          pytest
+      - name: Upload coverage reports
+        if: always()
+        uses: actions/upload-artifact@v4
+        with:
+          name: coverage-reports
+          if-no-files-found: warn
+          path: |
+            coverage.xml
+            htmlcov/
diff --git a/.gitignore b/.gitignore
index 85f6f31156d89194df8b99b4212a76e8d41c5bcc..e6f4ee9d7d5ff0fa5570fe6a56c78d708e4112ab 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,8 +1,11 @@
 .venv/
 .pytest_cache/
 __pycache__/
 *.pyc
+.coverage
+coverage.xml
+htmlcov/
 .env
 .envrc.local
 .ipynb_checkpoints/
 .DS_Store
diff --git a/README.md b/README.md
index 5daff57c9d7097091930632c952fffc27752120b..c328850f50864fd325e4ce41d31f23a07859fcd2 100644
--- a/README.md
+++ b/README.md
@@ -1,19 +1,19 @@
 # Medical_KG (replace via scripts/init.sh)

 Baseline template for Python projects in Cursor on Ubuntu.

 ## Quick start (per project)
 1. Run `scripts/init.sh <package_name> [python_version] "Description"`.
 2. Open folder in Cursor (`cursor .`).
 3. Ensure interpreter shows `.venv/bin/python`.
 4. Run target tasks: **pytest**, **lint**, **format**.

 See `.cursor/rules`, `.vscode/*`, and `environment.yml` for configuration details.

 ## Testing & Coverage

-- Run `pytest -q` to execute the offline suite. A trace-based hook enforces at
-  least **95% statement coverage** for `src/Medical_KG` and writes
-  `coverage_missing.txt` whenever new gaps appear.
-- Review `docs/testing_strategy.md` for guidance on fixtures, async helpers, and
-  coverage expectations.
+- Run `pytest` to execute the offline suite. Pytest-cov enforces at least
+  **95% statement coverage** for `src/Medical_KG` and automatically produces
+  `coverage.xml` plus an `htmlcov/` report for inspection.
+- Review `docs/testing_strategy.md` for guidance on typed fixtures, async
+  helpers, and coverage expectations.
diff --git a/coverage_missing.txt b/coverage_missing.txt
deleted file mode 100644
index 467ea97a111ed1e68280a328437a8e16f5bfd62f..0000000000000000000000000000000000000000
--- a/coverage_missing.txt
+++ /dev/null
@@ -1 +0,0 @@
-src/Medical_KG/__init__.py:9,11,15; src/Medical_KG/api/auth.py:20,37,38,39,40,41,42,43,44,46,47,49,50,57,58,59,60; src/Medical_KG/api/routes.py:53,54,55,58,59,60,61,62,63,64,65,66,67,68,71,72,73,74,75,76,77,78,90,91,92,93,94,95,96,97,98,99,103,107,137,138,139,140,141,142,143,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,169,170,183,184,185,186,187,189,190,191,192,193,194,195,196,197,200,207,208,209,210,211,212,213,214,217,218,222,223,232,233,234,235,236,237,251,252,253,258,269,270,271,272,273,281,282,283,284,285,293,294,295,296,297,305,306,307,308,309,317,318,319,320,321,329,330,331,333,344,351,359,367,368,369,370,371,374,382,386,397,398,403; src/Medical_KG/app.py:19,20,43,64,78,79,82,83,84,85,87,88,89,95,97,98,99; src/Medical_KG/briefing/api.py:30,47,52,53,55,63,68,69,71,79,84,85,87,95,100,101,103,119; src/Medical_KG/briefing/citation.py:23,26,29; src/Medical_KG/briefing/formatters.py:28,31,35,38,48,59,62,66,69,101,104,106,107,108,115; src/Medical_KG/briefing/qa.py:25,27,29,45,46,47,48,49,50,52,53,62,70,71,72,73,84,115,116,117,118,119; src/Medical_KG/briefing/repository.py:24,40,48,49,52,53,54,55,56,57,62,67,80,92; src/Medical_KG/briefing/service.py:74,75,76,77,85,86,87,88,89,90,91,92,93,94,101,102,111,112,120,126,127,131,176,177,178,179,180,181,182,183,184,193,197,206,207,208,209,210,211; src/Medical_KG/briefing/synthesis.py:205; src/Medical_KG/catalog/__init__.py:1,3,4,17,18,19,20,21,22,23,25; src/Medical_KG/catalog/licenses.py:1,3,5,7,10,11,13,14,15,16,18,21; src/Medical_KG/catalog/loaders.py:1,3,5,6,7,9,10,13,14,17,18,20,21,22,23,25,26,27,30,31,34,35,37,54,55,78,81,82,84,85,86,88,91,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,123,124,126,127,128,130,133,134,136,137,138,139,140,141,142,145,146,147,162,163,165,166,167,169,172,173,175,176,177,178,179,180,181,182,183,196,197,199,200,201,203,206,207,209,210,211,212,213,214,215,216,217,229,230,232,233,234,236,239,240,242,243,244,245,246,247,248,249,253,259,271,272,274,275,276,278,281,282,284,285,286,287,288,289,290,291,295,307,308,310,311,312,314,317,318,320,321,322,323,324,325,326,327,338,339,341,342,343,345,348,349,351,352,353,354,355,356,357,358,359,360,361,373,374,376,377,378,380,383,384,386,387,388,389,390,391,394,398,399,411,412,414,415,416,418,421,422,424,425,426,427,428,429,430,433,438,449; src/Medical_KG/catalog/models.py:1,3,5,6,7,8,11,12,14,15,16,17,18,19,20,21,22,25,26,28,29,30,31,32,33,37,38,40,41,43,44,45,46,47,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,83,86,87,88,89,90,91,92,93,94,95,96,97,98,101,102,103,104,107,108,109,110,111,114,115,116,117,118,121,122,123,124,125,127,128,130,131,133,134,136,137,139,140,142,143,144,145,147,148,150,151,152,153,154,155,157,158,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,187,189,193,194,196,212,213,215,216,217,218,219,220,221,222,223,226; src/Medical_KG/catalog/neo4j.py:1,3,5,6,8,9,12,13,14,18,19,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,54,55,57,58,59,60,75,77,78,79,80,81,82,83,84,86,87,91,94; src/Medical_KG/catalog/normalization.py:1,3,5,6,7,8,9,11,13,27,35,39,42,43,45,46,47,50,51,53,54,55,56,57,60,61,63,64,65,66,69,70,72,73,74,75,77,81,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,104,105,106,107,108,109,110,111,113,114,116,117,118,119,122,123,125,126,127,128,129,130,131,134; src/Medical_KG/catalog/opensearch.py:1,3,5,6,8,11,12,14,16,18,21,23,25,29,30,32,33,34,35,37,38,39,40,42,44,45,46,56,58,59,61,62,63,64,65,66,67,69,70,79,80,130,131,148,149,150,151,152,153,154,155,158; src/Medical_KG/catalog/pipeline.py:1,3,5,6,7,8,9,11,12,14,16,17,18,19,23,24,26,27,30,31,34,35,38,39,41,42,43,49,50,55,57,58,59,60,62,63,72,73,75,77,80,81,82,83,87,88,90,91,92,93,94,95,96,99,100,102,103,104,111,112,113,114,117,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,143,144,146,147,148,149,150,151,153,154,157,158,160,168,169,170,171,172,173,174,175,177,178,179,180,181,182,183,189,190,191,197,198,199,200,201,202,203,204,205,206,207,208,209,210,212,217,218,220,221,222,223,224,225,226,237; src/Medical_KG/catalog/state.py:1,3,5,6,10,11,13,14,16,17,19,20,22,23,25,26,29; src/Medical_KG/catalog/updater.py:1,3,5,6,7,9,10,11,12,15,16,27,28,30,31,32,33,34,35,37,38,39,40,41,42,43,45,46,47,48,49,58,59,60,61,62,63,64,65,68,69,70,71,72,73,74,75,78; src/Medical_KG/catalog/validators.py:1,3,5,6,8,21,32,33,34,35,36,37,40,41,42,43,44,45,48,49,51,54,55,57,60,61,63,66,67,69,72,73,75,76,77,80,81,83,84,85,86,87,88,89,92,93,95,98,109; src/Medical_KG/chunking/__init__.py:1,3,4,5,6,7,8,9,10,11,12,14; src/Medical_KG/chunking/chunker.py:1,3,5,6,7,8,9,10,11,13,15,16,17,19,20,21,22,23,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,54,55,56,57,58,59,60,61,62,66,67,68,69,70,71,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,93,94,95,96,97,98,100,101,102,103,104,105,106,107,108,109,112,113,115,116,117,119,120,121,122,123,127,128,129,130,134,135,136,137,138,139,140,141,142,143,144,145,146,151,152,153,154,155,160,163,164,165,166,167,168,169,170,171,172,173,175,176,177,178,179,180,181,182,183,184,185,186,189,190,191,194,195,196,198,199,200,208,209,211,218,219,220,221,222,223,226,229,232,233,234,235,236,237,238,239,240,246,247,248,249,250,251,252,253,254,255,273,274,275,276,277,278,279,280,281,283,286,287,288,290,291,292,293,294,295,296,303,305,306,307,308,309,311,312,313,314,315,317,322,323,324,325,326,327,328,329,330,331,332,333,334,335,337,338,339,340,341,342,343,344,345,346,347,349,350,351,352,353,354,355,356,357,359,360,361,362,363,364,365,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,386,387,388,389,390,391,392,393,396; src/Medical_KG/chunking/document.py:1,2,4,5,9,10,11,12,13,17,18,19,20,21,25,26,27,28,29,30,31,33,34,35,36,37,39,40,43; src/Medical_KG/chunking/facets.py:1,3,5,6,7,8,10,11,13,17,18,19,23,24,26,28,29,30,31,32,33,34,35,39,40,41,42,43,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,67; src/Medical_KG/chunking/indexing.py:1,3,5,6,7,9,13,14,16,17,18,19,20,21,22,23,24,25,26,27,30,31,33,34,36,37,38,39,40,41,43,46,48,49,50,51,52,53,54,55,57,58,59,60,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,142,143,144,145,146,147,148,149,150,151,153,154,155,156,157,160; src/Medical_KG/chunking/metrics.py:1,3,5,6,7,8,9,10,12,15,16,17,18,21,22,23,27,28,29,30,31,32,33,34,35,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,73; src/Medical_KG/chunking/neo4j.py:1,3,5,6,7,9,12,13,17,18,20,21,22,23,24,25,26,28,35,36,37,38,39,40,41,43,44,45,64,66,67,73,74,76,77,78,79,80,81,82,83,84,85,90,97,99,100,101,102,103,108,109,111,112,113,114,115,116,121,128,129,134,136,137,138,139,140,143; src/Medical_KG/chunking/opensearch.py:1,3,5,6,8,9,10,13,14,16,18,21,23,25,29,30,32,33,34,43,44,45,46,74,76,79,80,81,82,83,84,85,86,101,102,103,105,106,107,118,119,133,134,135,136,137,139,141,143,144,145,146,151,152,154,155,157,158,159,160,176,178,179,180,181,182,183,184,185,186,187,196,199; src/Medical_KG/chunking/pipeline.py:1,3,5,6,7,9,10,11,12,13,14,16,17,21,22,23,24,25,29,30,31,32,33,34,37,38,40,48,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,78,86,87,88,89,92,93,94,95,96,97,102,103,104,105,108,109,110,118,121; src/Medical_KG/chunking/profiles.py:1,2,4,5,9,10,11,12,13,16,24,25,26,27,28,31; src/Medical_KG/chunking/tagger.py:1,3,5,6,7,8,9,11,14,15,16,17,18,19,20,21,22,23,24,28,29,31,34,43,44,45,46,47,48,49,50,51,52,53,54,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,99,100,101,102,103,105,106,107,108,109,112; src/Medical_KG/cli.py:1,3,5,6,7,8,9,10,12,13,15,16,17,18,19,20,21,29,32,33,34,37,38,39,40,41,42,43,46,47,48,49,50,51,53,54,55,56,57,60,61,62,63,64,65,67,68,69,70,73,74,75,76,78,79,80,81,82,83,84,87,88,89,90,92,93,94,95,98,99,100,102,103,104,105,106,107,108,109,110,111,113,114,115,116,117,122,123,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,153,154,156,157,158,159,160,162,163,164,167,168,169,171,172,173,174,175,176,178,179,180,181,182,183,184,185,188,189,190,191,193,194,195,196,198,199,200,201,202,203,204,205,206,207,208,210,211,212,214,216,217,220,221,222,224,225,227,228,229,230,232,233,234,235,236,238,239,240,243,244,245,246,247,249,250,251,252,253,255,258,259,264,267,268,269,270,273,279,282,283,284,285,286,288,291,292,293,294,297,298; src/Medical_KG/config/manager.py:61,64,79,85,100,101,102,103,106,107,112,118,121,122,129,130,133,136,137,141,142,146,149,150,157,160,163,164,187,200,209,214,215,216,224,225,234,242,250,265,270,271,275,276,277,278,279,281,282,283,284,285,287,290,291,292,293,294,295,296,297,298,325,330,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,358,359,360,361,364,365,367,368,369,372,373,374,375,376,377,378,382,384,385,386,387,388,389,392,393,394,395,397,404,405,409; src/Medical_KG/config/models.py:15,21,25,28,43,46,50,56,62,68,78,80,91,94,95,96,97,102,103,104,105,106,107,108,109,110,112,113,116,117,120,121,122,123,124,125,126,127,128,129,132,133,134,135,136,137,138,139,140,141,142,143,144,145,148,151,152,159,162,165,166,169,180; src/Medical_KG/embeddings/__init__.py:1,3,4,11,12,13,15; src/Medical_KG/embeddings/gpu.py:1,3,5,6,7,8,9,11,13,15,18,19,23,24,26,27,29,30,31,33,34,35,36,37,40,41,50,54,55,56,57,61,62,63,64,65,66,67,70,71,72,73,74,75,78,81,83,84,85,86,87,89,90,91,94; src/Medical_KG/embeddings/monitoring.py:1,3,5,6,7,8,9,10,12,13,16,17,18,22,23,25,26,30,31,33,34,35,36,37,41,42,44,45,46,47,48,49,53,54,56,57,58,60,61,63,64,65,66,67,68,69,70,78,79,81,86,94,95,96,97,98,99,100,101,102,103,104,105,106,108,109,111,112,113,114,115,117,118,120,121,123,124,128,130,137,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,156,157,158,159,160,161,162,163,165,167,168,177,178,180,201,202,203,206; src/Medical_KG/embeddings/qwen.py:1,3,5,6,7,8,9,10,12,16,17,19,20,21,22,23,24,25,26,27,29,30,32,33,34,35,36,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,58,59,60,61,62,63,64,65,67,68,70,71,72,73,74,75,76,78,79,80,81,83,84,85,88; src/Medical_KG/embeddings/service.py:1,3,5,6,7,9,10,11,15,16,18,19,20,24,25,27,28,29,30,32,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,53,55,56,57,58,59,60,63,64,66,67,69,70,73; src/Medical_KG/embeddings/splade.py:1,3,5,6,7,8,9,11,15,16,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,41,42,45; src/Medical_KG/entity_linking/__init__.py:1,2,3,4,5,6,7,9; src/Medical_KG/entity_linking/candidates.py:1,2,4,5,7,9,13,14,15,16,17,18,21,22,23,26,27,28,31,32,33,36,37,45,46,47,48,50,51,52,53,54,55,60,70,71,72,73,82,83,86; src/Medical_KG/entity_linking/decision.py:1,2,4,5,7,8,9,13,14,15,16,19,20,21,23,29,30,31,32,33,34,35,36,43,44,47; src/Medical_KG/entity_linking/detectors.py:1,2,4,5,6,10,11,12,13,14,15,18,19,20,21,22,23,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,58; src/Medical_KG/entity_linking/llm.py:1,2,4,5,6,8,9,12,13,14,18,19,20,21,22,23,24,27,28,29,31,32,45,46,56; src/Medical_KG/entity_linking/ner.py:1,2,4,5,7,11,12,13,14,15,18,19,21,22,24,25,26,27,28,31; src/Medical_KG/entity_linking/service.py:1,2,4,5,7,8,9,10,11,15,16,17,18,21,22,23,26,27,36,37,38,39,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,58; src/Medical_KG/evaluation/__init__.py:1,2,3,4,6; src/Medical_KG/evaluation/harness.py:1,2,4,5,6,8,15,19,20,21,22,25,26,28,29,31,32,33,34,35,36,37,38,39,40,41,43,44,45,50,51,55,59,60,62,63,64,68,69,73,83,85,86,87,88,89,90,91,92,93,96; src/Medical_KG/evaluation/metrics.py:1,2,4,5,6,10,11,12,13,16,17,18,19,20,21,22,23,24,25,26,29,30,31,32,33,34,35,36,37,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,57,58,61,62,63,64,65,66,69; src/Medical_KG/evaluation/models.py:1,2,4,5,9,10,11,12,13,14,18,19,20,21,22,26,27,28,29,30,32,33,41; src/Medical_KG/extraction/kg.py:15,19,20,29,30,31,41,42,43,44,45,46,55,56,57,58,59,60,74,80,81,93,94,95,96,106,107,108,109,116,117,118; src/Medical_KG/extraction/metrics.py:24,25,27,28,29,30,31,33,42,43,44,45,48,49,50,51,52,53,54,55,58,59,60,61,62,63,69,70,71,72,73,74,75,78,79,80,81,82,83,84,85,88,89,90,91,92,93,94,101,102,103,104,105,106,107,108,109,110,111,112; src/Medical_KG/extraction/models.py:95,96,97,98; src/Medical_KG/extraction/normalizers.py:30,31,32,33,34,35,36,37,38,42,43,44,45,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,115,116,117,118,119,120,121,122,123,124,125,126,132,133,134,135,136,137,138,142,143,144,145,146,147,148,149,150,151,152,156; src/Medical_KG/extraction/parsers.py:20,21,22,23,24,25,26,27,31,32,33,34,38,39,40,41,45,46,47,48,49,50,51,52,53,57,58,59,60,61,62,63,67,68,69,70,79,80,81,83; src/Medical_KG/extraction/prompts.py:83,84,85,86,89,93,94; src/Medical_KG/extraction/resolvers.py:24,25,26,30,31,32,36,37,38; src/Medical_KG/extraction/service.py:41,42,43,44,48,49,50,54,55,56,57,58,59,60,61,62,63,64,65,66,77,78,79,80,81,82,83,84,85,86,87,88,89,101,102,103,104,105,106,107,108,109,110,111,122,123,124,125,126,127,128,129,130,131,141,142,143,144,145,146,147,154,155,162,198,199,200,201,202,203,204,205,206,207,208,209,211,212,213,216,217,218,219,220,221,224,225,226,239,244,245,246,247,249,250,251,252,255,256,257,258,265,266,267,268; src/Medical_KG/extraction/validator.py:33,34,35,40,56,57,58,59,60,61,62,63,64,65,66,68,69,72,73,74,75,76,77,78,81,82,83,84,87,88,89,94,97,98,101,102,103,104,105,106,109,110,111,112; src/Medical_KG/facets/dedup.py:13,14,15,16,20,21,22,23,24,25,34,35,36,37,46,47,48,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71; src/Medical_KG/facets/generator.py:37,38,39,40,44,45,46,47,51,52,53,54,55,56,64,75,76,77,78,79,80,81,82,92,93,94,95,96,104,108,109,110,111,112,113,114,115,116,141,142,143,144,145,146,147,151,152,153,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,176,180,181,182,183,184,185,186,187,188,189,190,191,195,196,197,198,202,203,204,205,207,208,209,211,212; src/Medical_KG/facets/models.py:20,21,22,23,125,128,129,130,131,132,133,134,135,136; src/Medical_KG/facets/normalizer.py:32,33,34,35,39,40,41,42,43,44,48,49,50,51,55,56,57,58,62,63,64,65,66,67,68,69,73,74,75,76,77,78,79,80,81,82,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,111,112,113,114,115,116,117,121,125,126,127,128,129,130,131,132,133,134; src/Medical_KG/facets/router.py:32,35,36,37,38,39,40,41,45,46,47,48,49,50,51,52,53,54,58,59,60,61,62,63,64,65,68,69,70,71,72,73,74,75,81,82,83,84,85,86; src/Medical_KG/facets/service.py:48,49,50,51,52,55,58,59,60,61,62,63,64,65,66,69,70,71,72,75,76,77,78,81,84,85,86,87,88,89,90,104,105,106,109,110,111,113,114,116,117,118,121,122,123,124,127,130,133,137,140,143,144,145,146,149,150,151,152; src/Medical_KG/facets/tokenizer.py:12,16,18,19,20,21; src/Medical_KG/facets/validator.py:36,37,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54,55,58,59,60,61,62,65,66,67,68,73,74,77,78,79,82,83,84,85,89,90; src/Medical_KG/infrastructure/__init__.py:1,2,3,5; src/Medical_KG/infrastructure/models.py:1,2,4,5,9,10,11,12,13,17,18,19,20,21,22,23,24,25,26,27,31,32,33,34,38,39,40,41,42,43,44,45,48,49,50,51,60,63; src/Medical_KG/infrastructure/planner.py:1,2,4,5,7,9,13,14,16,17,19,20,30,31,32,33,34,35,36,37,38,39,41,42,50,63,64,83,84,105,106,113,114,116,117,158,159,173,174,181,182,190,191,209,210,220,221,234,235,265,266,267,268,269,275,278; src/Medical_KG/ingestion/__init__.py:1,3,4,5,6,8; src/Medical_KG/ingestion/adapters/base.py:1,3,4,5,6,8,9,10,14,15,18,19,21,22,24,25,26,27,28,29,30,35,36,38,39,44,45,46,49,50,53,54,57,58,60,61,66,68,69; src/Medical_KG/ingestion/adapters/clinical.py:1,3,4,5,6,7,8,10,11,12,13,14,16,17,20,21,23,25,33,34,35,37,38,39,40,41,43,44,45,46,47,48,49,50,51,52,53,55,56,57,58,59,60,61,62,63,74,75,76,81,89,90,91,92,93,94,95,96,99,100,102,104,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,146,147,148,149,152,153,155,157,164,165,167,168,169,170,171,172,173,174,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,193,194,195,196,199,200,202,204,211,212,214,215,216,217,218,219,220,222,223,224,225,232,233,234,236,237,238,239,242,243,246,247,248,249,250,251,252,253,254,255,258,259,261,263,270,271,273,274,275,276,277,278,279,281,282,283,284,291,292,293,301,302,303,304,307,308,310,312,313,314,315,316,317,318,320,321,322,323,324; src/Medical_KG/ingestion/adapters/guidelines.py:1,3,4,5,6,8,9,10,11,12,15,16,18,25,26,28,29,30,33,34,36,37,38,39,40,41,42,43,44,46,47,54,55,56,57,58,60,61,62,63,64,65,68,69,71,72,73,74,75,76,78,79,85,86,87,89,90,91,94,95,97,98,99,100,101,102,103,104,105,107,108,109,110,111,112,114,115,116,119,120,122,123,124,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,142,143,144,147,148,150,151,152,153,154,155,156,157,158,159,160,162,163,169,170,171,172,174,175,176,179,180,182,183,184,185,186,187,188,189,191,192,193,194,195,196,198,199,200; src/Medical_KG/ingestion/adapters/http.py:1,3,5,6,9,10,12,13,14,16,17,19,20,22,25; src/Medical_KG/ingestion/adapters/literature.py:1,3,4,5,6,7,8,10,11,12,13,14,16,17,18,19,20,22,23,26,27,29,30,31,32,33,34,36,37,38,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,82,83,84,85,86,87,96,97,98,99,100,101,102,103,104,105,107,108,109,110,111,124,125,126,132,134,135,136,137,138,141,142,143,144,145,146,147,148,149,150,151,152,155,156,157,159,160,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,219,222,223,225,226,227,228,230,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,278,279,280,281,282,283,284,286,287,288,289,290,293,294,296,297,298,299,300,301,302,304,305,307,308,309,310,311,312,313,315,316,317,318,319,320,321,322,324,325,326,327,328,329,330,331,332,333,334,335,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,353,354,355,356,357,358,359,360,361,362,363,366,367,369,376,377,379,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,404,405,406,407,408,414,415,416,417,419,420,421,422,423; src/Medical_KG/ingestion/adapters/terminology.py:1,3,4,5,6,8,9,10,11,12,14,15,16,17,18,21,22,24,31,32,34,35,36,37,38,39,40,42,43,44,45,46,47,48,49,50,55,56,57,59,60,61,62,65,66,68,75,76,78,79,80,81,82,83,84,86,87,88,89,95,96,97,99,100,101,102,105,106,108,115,116,118,119,120,121,122,123,124,126,127,128,135,136,137,139,140,141,142,145,146,148,155,156,158,159,160,161,162,163,164,166,167,168,174,175,176,178,179,180,181,184,185,187,194,195,197,198,199,200,201,202,203,205,206,207,208,213,214,215,217,218,219,220,221,222; src/Medical_KG/ingestion/cli.py:1,3,4,5,6,8,10,11,12,14,17,18,20,23,24,27,28,31,32,33,34,35,39,45,47,48,49,51,52,53,54,56,57,58,59,60,61,62,64,65,66,68,70,73,74; src/Medical_KG/ingestion/http_client.py:1,3,4,5,6,7,8,9,10,12,14,15,18,19,20,22,23,25,26,28,29,31,32,35,40,48,49,50,53,54,55,56,57,58,60,61,62,64,65,67,68,69,70,71,72,73,74,75,76,77,78,81,82,84,93,94,96,98,99,100,101,102,103,105,106,108,109,110,111,112,114,115,116,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,142,149,151,159,162,163,164,165,166,167,168,169,170,172,179,180,182,189,190,192,199,200,202,203,205,206,207; src/Medical_KG/ingestion/ledger.py:1,3,4,5,6,7,9,13,14,15,16,17,20,21,23,24,25,26,27,28,29,30,36,38,39,45,51,52,53,54,55,56,58,59,61,62,63,64,65; src/Medical_KG/ingestion/models.py:1,3,4,5,9,10,12,13,14,15,16,18,19,29,30,31,32,33; src/Medical_KG/ingestion/registry.py:1,3,5,7,8,16,24,25,32,34,37,38,39,40,42,44,68,71,72,73,75,76,79,80; src/Medical_KG/ingestion/utils.py:1,3,4,5,6,7,9,11,14,15,16,17,20,21,22,24,25,26,29,30,33,34,35,38,39; src/Medical_KG/ir/__init__.py:1,3,4,5,7; src/Medical_KG/ir/builder.py:1,3,4,5,7,8,10,12,13,16,17,19,20,22,31,32,33,41,42,43,44,46,47,56,57,58,60,67,68,69,70,71,72,73,83,84,85,88,89,91,92,93,99,100,101,102,103,105,106,113,115,116,117,118,126,127,128,129,130,133,134,136,137,138,139,140,141,142,146,147,148,149,150,151,152,153,154,155,157,158,159,160,161,162,163,164,167,168,170,171,172,173,181,182,183,184,185,186,188,189,190,191,192,193,194,195,198,199,201,202,203,214,215,216,217,218,219,220,221,222,223,224,225,226,237,238,239,240,241,242,243,253,256,257,259,260,261,262,263,264,265,266,267,268,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,290,291,292,293,294,295,298,299,300,301,302,303,304,305,306,307,308,309,310,311,313,314,315,316,317,318,320,321,322,324,325,326,328,329,330,331,332,333,338,339,340,341,344,345,347,351,352,353,354,355,356,357,358,359,360,361,362,363,365,366,367,368,369,370,371,372,373,374,375,376,377,378,385,387,388,389,390,392,393,394,395,402,404,405,406,407,408,409,410,411; src/Medical_KG/ir/models.py:1,3,4,5,9,10,11,12,13,14,15,16,20,21,23,34,35,36,37,38,39,40,52,53,54,55,62,63,64,65,66,67,69,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,100,101,102,106,107,108,109,110,111,112,116,117,118,119,120,121,122,126,127,128,129,130,131,132,133,134,135,136,137,139,140,142,143,145,146,181,182,183,184,185,186,187,188; src/Medical_KG/ir/normalizer.py:1,3,4,5,6,8,10,12,23,24,25,26,27,30,31,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,52,53,54,55,56,57,58,59,60,61,63,64,65,66,68,69,70,72,73,76,77,78,79,80,81,82,83,84,85,86; src/Medical_KG/ir/storage.py:1,3,4,5,6,8,11,12,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42; src/Medical_KG/ir/validator.py:1,3,4,5,6,8,11,12,15,16,18,19,20,21,26,27,30,31,33,35,36,38,39,40,41,42,43,45,47,48,50,51,53,54,56,57,58,60,61,62,63,64,65,67,68,69,70,71,72,74,75,77,78,79,80,81,82,84,85,86,88,89,90,91,93,94,95,96,97,98,100,101,102,103,105,106,107,108,109,110,111,112,114,115,116,118,119,120,122,123,124,125,126,127,129,130,131,132,134,135,136,137,138,139,140,141,142,143,144,146,147,148,149,150,151,153,154,155,157,158,159,160,161,162,163,165,166,167,168,169,170,171,172,173,174,175,176; src/Medical_KG/kg/batch.py:1,3,5,8,9,11,19,20,22,30,31,33; src/Medical_KG/kg/fhir.py:17,20,21,22,34,35,38,39,42,43,44,49,50,51,52,53,54,55,57,65,68,69,70,71,72,73,74,75,76,77,84,92,96,103; src/Medical_KG/kg/query.py:29,31,42,47,55,57,58,68,69,72,74,86,95,97,105,110; src/Medical_KG/kg/schema.py:21,24,27,47,80,269,354,393,424,427,435,437; src/Medical_KG/kg/service.py:24,25,35,36,38,39,40,42,44,45,46,47,48,49,51,58,59,60,61,62,63,64,65,66,67,68,69,70,71; src/Medical_KG/kg/validators.py:24,27,28,29,30,37,38,41,42,43,45,46,47,48,50,51,52,53,54,55,56,57,58,59,61,63,64,65,67,69,71,72,73,76,77,78,79,80,81,82,83,84,85,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,116,117,118,119,120,123,124,125,126,127,130,131,132,135,136,137,138,139,140,141,142,150,151,152,153,155,156,157,158,159,160,161,162,163,164,167,168,169,170,171,172,173,174,175,176,177,178; src/Medical_KG/kg/writer.py:57,61,64,67,68,69,70,71,72,73,74,75,76,77,78,79,80,83,92,93,94,95,96,97,98,102,103,104,105,108,111,112,113,114,115,119,127,128,129,133,138,139,143,144,153,154,158,159,160,161,162,165,168,171,172,173,177,188,189,190,194,197,198,211,212,213,214,224,233,234,243,244,253,254,255,256,257,258,263,264,265,266,270,275,276,280,281,284,294,295,296,297,301,302,303,304,318,319,320,321,322,323,324,325,326,331; src/Medical_KG/observability/logging.py:25,32,34,36,51; src/Medical_KG/observability/tracing.py:36,38,40,41,42,56,65,66,68,69,70,71; src/Medical_KG/pdf/__init__.py:1,2,3,4,5,6,8; src/Medical_KG/pdf/gpu.py:1,2,4,5,6,7,10,11,14,15,16,20,21,22,25,26,27,28,30,31,32,33,36,37,38,39,40,41,44; src/Medical_KG/pdf/mineru.py:1,2,4,5,6,7,8,10,14,15,16,17,18,22,23,24,25,29,30,31,32,33,34,37,38,39,40,41,43,44,45,46,58,59,60,61,62,63,64,70,75,78; src/Medical_KG/pdf/postprocess.py:1,2,4,5,6,10,11,12,13,14,17,18,19,20,21,22,24,25,26,27,28,29,30,32,33,34,37,38,39,40,41,42,45,46,47,50,51,58,59,60,61,62,63,64,65,67,68,71; src/Medical_KG/pdf/qa.py:1,2,4,5,7,11,12,13,14,15,18,19,22,23,24,25,27,28,29,30,31,32,33,34,36,37,38,39,41,42,43,44,45,46,48,55,56,57,58,59,60,61,62,63,64,72; src/Medical_KG/pdf/service.py:1,2,4,5,6,8,10,11,12,13,17,18,19,20,23,24,25,28,29,30,33,34,42,43,44,45,46,47,48,49,51,53,55,56,57,58,59,60,61,62,63,64,65,66,74,81,82,85; src/Medical_KG/retrieval/__init__.py:27,28; src/Medical_KG/retrieval/api.py:25,28,66,69,70,71,86,93,95; src/Medical_KG/retrieval/caching.py:22,23,24,27,28,29,30,31,32,33,34,35,36,39,40,41,42,43,44,45,46,49,50,51,54,55,58,59; src/Medical_KG/retrieval/clients.py:12,17,22,27,32,48,49,67,70,71,78,81,82,87,90,95,98,99; src/Medical_KG/retrieval/fusion.py:11,12,13,14,15,16,17,18,28,29,30,31,32,33,34,35,36,44,45,46,47,48; src/Medical_KG/retrieval/intent.py:21,22,25,26,27,28,29,32,33,34,35,36,37,38; src/Medical_KG/retrieval/models.py:24,25,26,27,28,29,30,31,32,33,34,35,52,59,118,119,120,121,125,126,127,128,129,130,131,132; src/Medical_KG/retrieval/neighbor.py:11,12,15,16,17,18,19,20,21,22,23,24,25,26,30,31,32,33; src/Medical_KG/retrieval/ontology.py:19,22,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48; src/Medical_KG/retrieval/service.py:59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76,77,90,97,98,101,102,105,106,117,118,119,120,130,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,166,167,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,199,200,203,204,205,206,207,208,209,210,211,212,213,214,215,227,228,231,232,233,234,235,236,237,238,239,240,242,243,244,247,248,249,250,251,252,253,254,256,257,259,260,261,263,265,266,273,274,275,276,277,278,285,286,288,289,290,292,293,294,296,297,298,299,300,301,302,303,304,305,306,307,308,309,311,312,313,315,319,320,321,322,323,339,340; src/Medical_KG/security/audit.py:22,23,26,31,32,35,36,37,38; src/Medical_KG/security/licenses.py:28,29,33,34,35,36,37,41,45,48,49,50,53,54,55,56,57,58,59,60,61; src/Medical_KG/security/provenance.py:23,24,27,30,31,32,35,36,37,38,41; src/Medical_KG/security/rbac.py:13,16,17,18,19; src/Medical_KG/security/retention.py:19,20,21,22,23,26; src/Medical_KG/security/shacl.py:12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39; src/Medical_KG/services/chunks.py:24,27,30,33; src/Medical_KG/services/retrieval.py:25,26,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,57; src/Medical_KG/utils/optional_dependencies.py:15,16,17,18,25,47,54,67,70,73,80,83,86,90,92,93,95,97,98,102,104,105,107,109,110,112,113,117,119,120,122,123,127,132
\ No newline at end of file
diff --git a/docs/testing_strategy.md b/docs/testing_strategy.md
index 2c6cab4f22840fa1a20e14ae62e8a250165fcbb1..f838350b803930fa3e25c8ebb709fc50c4228c56 100644
--- a/docs/testing_strategy.md
+++ b/docs/testing_strategy.md
@@ -1,59 +1,57 @@
 # Testing Strategy

 The automated test suite exercises Medical_KG through fast unit tests, focused
 integration tests, and scenario-level validations that run entirely offline.
 This document summarizes expectations for contributors adding or updating
 checks.

 ## Test Suite Structure

 - **Unit tests** cover individual modules in isolation (e.g., briefing
   synthesis utilities, ingestion CLI). They use fixtures and lightweight
   doubles to cover success and failure paths.
 - **Integration tests** assemble multiple layers (e.g., ingestion adapters,
   retrieval service) using fake transports and repositories so that behavior is
   deterministic and does not depend on third-party services.
 - **Property and regression tests** focus on edge cases—boundary calculations
   and conflict detection—to guard against subtle regressions.

 ## Running Tests Locally

 ```bash
-# run the default pytest suite with the trace-based coverage hook enabled
-pytest -q
+# run the default pytest suite with coverage enforcement enabled
+pytest
 ```

-The suite uses a `trace`-backed coverage gate (see `tests/conftest.py`). If you
-need to explore code interactively, set `DISABLE_COVERAGE_TRACE=1` in the
-environment before invoking pytest.
+`pytest-cov` enforces coverage targets using the defaults configured in
+`pyproject.toml`. The command above produces `coverage.xml` and an HTML report in
+`htmlcov/` for local inspection.

 ## Coverage Expectations

 - Total statement coverage for `src/Medical_KG` must remain at or above 95%.
-- The gate writes `coverage_missing.txt` if new lines are untested—review this
-  file for failing builds and add tests for the reported locations.
+- The HTML report (`htmlcov/index.html`) and terminal summary highlight missing
+  lines—treat any uncovered paths as bugs and add tests accordingly.

 ## Fixtures and Helpers

-- Sample payloads live under `tests/fixtures`. Create shared factories when
-  multiple tests require the same structures.
-- For async code, prefer `pytest` fixtures that provide fake transports rather
-  than real network clients. The local `httpx` shim and FastAPI stubs are
-  available for offline execution.
-- When a test needs to bypass coverage enforcement (for example, to measure
-  raw coverage via `coverage.py`), set the `DISABLE_COVERAGE_TRACE` environment
-  variable to `1`.
+- Sample payloads live under `tests/fixtures`. Shared typed factories and mocks
+  are published under `tests/common` to standardize ingestion/retrieval
+  scenarios.
+- For async code, prefer the doubles in `tests/common.mocks` instead of real
+  network clients so tests stay offline.

 ## Secrets and Environment Variables

 Tests must not depend on real credentials. Default values for all required
 configuration live in `.env.test` and `.env.example`. If a module references a
 new secret, document the fake fallback here and update the env templates.

 ## Maintenance Workflow

 1. Add or update tests alongside code changes.
-2. Run `pytest -q`; if coverage fails, inspect `coverage_missing.txt` and update
-   tests until the gap disappears.
+2. Run `pytest`; if coverage fails, inspect the terminal summary or
+   `htmlcov/index.html` to identify gaps, then expand tests until the target is
+   met.
 3. Record notable testing patterns or fixtures in this document to aid future
    contributors.
diff --git a/openspec/changes/update-test-coverage-infrastructure/specs/testing/spec.md b/openspec/changes/update-test-coverage-infrastructure/specs/testing/spec.md
index acee46180624246958b61f3517676ef206528d70..c7afe96bba1082ec7387a45b63cb7bc3962fa109 100644
--- a/openspec/changes/update-test-coverage-infrastructure/specs/testing/spec.md
+++ b/openspec/changes/update-test-coverage-infrastructure/specs/testing/spec.md
@@ -1,20 +1,20 @@
 ## ADDED Requirements

 ### Requirement: Typed Test Infrastructure

 The test suite SHALL provide shared typed fixtures, async mocks, and service doubles so new tests can rely on annotated utilities instead of ad-hoc stubs.

 #### Scenario: New integration test

 - **WHEN** a contributor writes an integration test for ingestion or retrieval
-- **THEN** they SHALL be able to import typed fixtures from `tests/common` without introducing `Any` usage
+- **THEN** they SHALL be able to import typed factories and doubles from `tests/common` without introducing `Any` usage

 ### Requirement: Pragmatic Coverage Enforcement

 Coverage enforcement SHALL use pytest’s coverage tooling with agreed thresholds and reports instead of manual tracing requiring 100% line execution.

 #### Scenario: CI coverage gate

 - **WHEN** a pull request runs CI
-- **THEN** coverage SHALL be evaluated using configured thresholds (e.g., module-level minimums) and SHALL fail only if targets are not met
-- **AND** HTML/XML reports SHALL be produced for inspection
+- **THEN** coverage SHALL be evaluated using pytest-cov thresholds and SHALL fail only if targets are not met
+- **AND** HTML/XML reports SHALL be produced for inspection and uploaded as build artifacts
diff --git a/openspec/changes/update-test-coverage-infrastructure/tasks.md b/openspec/changes/update-test-coverage-infrastructure/tasks.md
index 942f6010f8bfc3ad86e1718cea9a5a2d290959a6..bb2f3c27af67e9ebbd4fa4fc48ac6c88f4d39109 100644
--- a/openspec/changes/update-test-coverage-infrastructure/tasks.md
+++ b/openspec/changes/update-test-coverage-infrastructure/tasks.md
@@ -1,30 +1,30 @@
 # Implementation Tasks

 ## 1. Fixture & Mock Infrastructure

-- [ ] 1.1 Create shared factories for documents, chunks, and API responses
-- [ ] 1.2 Provide async transport mocks and service doubles (ingestion, retrieval)
-- [ ] 1.3 Publish utilities under `tests/common` with type annotations
+- [x] 1.1 Create shared factories for documents, chunks, and API responses
+- [x] 1.2 Provide async transport mocks and service doubles (ingestion, retrieval)
+- [x] 1.3 Publish utilities under `tests/common` with type annotations

 ## 2. Ingestion & Retrieval Tests

 - [ ] 2.1 Add integration tests for clinical/literature/guideline adapters (mocking external APIs)
 - [ ] 2.2 Cover retrieval service flows (auth, caching, fallbacks) with typed tests
 - [ ] 2.3 Exercise security modules (license enforcement, retention policies) in test harness

 ## 3. GPU & Embeddings Coverage

 - [ ] 3.1 Simulate GPU validator scenarios (success/failure, fallback paths)
 - [ ] 3.2 Validate embeddings monitoring/alerting logic with typed tests

 ## 4. Coverage Tooling

-- [ ] 4.1 Replace manual tracing with pytest coverage configuration (per-file thresholds, html/xml reports)
-- [ ] 4.2 Integrate coverage enforcement into pre-commit/CI (non-100% but realistic targets)
-- [ ] 4.3 Document how to run coverage locally and interpret reports
+- [x] 4.1 Replace manual tracing with pytest coverage configuration (per-file thresholds, html/xml reports)
+- [x] 4.2 Integrate coverage enforcement into pre-commit/CI (non-100% but realistic targets)
+- [x] 4.3 Document how to run coverage locally and interpret reports

 ## 5. Verification

 - [ ] 5.1 Run full pytest suite with new fixtures and ensure stability
 - [ ] 5.2 Generate coverage report and confirm agreed thresholds met
 - [ ] 5.3 Update documentation and CI badges once new process lands
diff --git a/pyproject.toml b/pyproject.toml
index 0279973911a30f828432c0a0314a4ca9d4fff01d..a01ac66ac6e29dc43006ac8386c9fc9a19eb8478 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,47 +1,46 @@
 [project]
 name = "Medical_KG"
 version = "0.1.0"
 description = "Production-ready Medical Knowledge Graph with GPU-accelerated processing"
 readme = "README.md"
 requires-python = ">=3.12"
 dependencies = [
     # HTTP & Async
     "httpx[http2]==0.28.1",
     "tenacity==9.1.2",
     "aiolimiter==1.2.1",
     "anyio==4.11.0",

     # CLI & UI
     "typer==0.17.5",
     "rich==14.1.0",
     "tqdm==4.67.1",

     # Data Models & Validation
     "python-dotenv==1.1.1",
     "pydantic==2.11.9",
-    "pydantic==2.10.6",

     # JSON & Serialization
     "orjson==3.11.3",
     "jsonlines==4.0.0",
     "pyyaml==6.0.3",

     # XML/HTML Parsing
     "lxml==6.0.2",
     "beautifulsoup4==4.14.2",
     "html5lib==1.1",
     "xmltodict==1.0.2",

     # RDF & SPARQL
     "rdflib==7.2.1",
     "SPARQLWrapper==2.0.0",

     # Authentication & Security
     "authlib==1.6.5",
     "cryptography==46.0.2",

     # Date & Time
     "python-dateutil==2.9.0.post0",

     # NLP & Text Processing
     "langdetect==1.0.9",
@@ -136,25 +135,30 @@ dev = [
 models = [
     # SpaCy Models (download separately)
     # python -m spacy download en_core_sci_md
     # python -m spacy download en_core_web_sm
 ]

 [project.scripts]
 med = "Medical_KG.cli:main"

 [tool.black]
 line-length = 100

 [tool.ruff]
 line-length = 100
 target-version = "py312"
 extend-select = ["I"]

 [tool.mypy]
 python_version = "3.12"
 strict = true
 exclude = [
     "ops/load_test/",
     "ops/e2e/",
     "ops/chaos/",
 ]
+
+[tool.pytest.ini_options]
+addopts = "--maxfail=1 --disable-warnings --cov=src/Medical_KG --cov-report=term-missing --cov-report=xml --cov-report=html --cov-fail-under=95"
+asyncio_mode = "auto"
+testpaths = ["tests"]
diff --git a/tests/__init__.py b/tests/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..54e97ef5ecd598326f294ae7a2642ce54cfee87f
--- /dev/null
+++ b/tests/__init__.py
@@ -0,0 +1 @@
+"""Test package marker for shared utilities."""
diff --git a/tests/common/__init__.py b/tests/common/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..6893e8ac17bceb62e98ae81dba0db38c2b8ecb21
--- /dev/null
+++ b/tests/common/__init__.py
@@ -0,0 +1,30 @@
+"""Shared typed fixtures and mocks for the test suite."""
+
+from .factories import (
+    make_chunk_document,
+    make_chunk_section,
+    make_ingestion_document,
+    make_ingestion_result,
+    make_retrieval_request,
+    make_retrieval_response,
+    make_retrieval_result,
+    make_retrieve_response_model,
+    make_error_response_model,
+)
+from .mocks import MockAsyncHttpClient, MockHttpResponse, StubIngestionAdapter, StubRetrievalService
+
+__all__ = [
+    "make_chunk_document",
+    "make_chunk_section",
+    "make_ingestion_document",
+    "make_ingestion_result",
+    "make_retrieval_request",
+    "make_retrieval_response",
+    "make_retrieval_result",
+    "make_retrieve_response_model",
+    "make_error_response_model",
+    "MockAsyncHttpClient",
+    "MockHttpResponse",
+    "StubIngestionAdapter",
+    "StubRetrievalService",
+]
diff --git a/tests/common/factories.py b/tests/common/factories.py
new file mode 100644
index 0000000000000000000000000000000000000000..34eff362c6be992d4024850d064571c539c08e4f
--- /dev/null
+++ b/tests/common/factories.py
@@ -0,0 +1,211 @@
+"""Typed factories for constructing common domain objects in tests."""
+from __future__ import annotations
+
+from datetime import datetime, timezone
+from typing import Any, Iterable, Mapping, MutableMapping, Sequence
+
+from Medical_KG.api.models import ErrorDetail, ErrorResponse, RetrieveResponse, RetrieveResult
+from Medical_KG.chunking.document import Document as ChunkDocument, Section
+from Medical_KG.ingestion.models import Document as IngestionDocument, IngestionResult
+from Medical_KG.retrieval.models import (
+    RetrievalRequest,
+    RetrievalResponse,
+    RetrievalResult,
+    RetrieverScores,
+    RetrieverTiming,
+)
+
+
+def make_ingestion_document(
+    *,
+    doc_id: str = "doc-1",
+    source: str = "test",
+    content: str = "Example content",
+    metadata: MutableMapping[str, Any] | None = None,
+    raw: Any | None = None,
+) -> IngestionDocument:
+    """Return an ingestion document with safe defaults."""
+
+    return IngestionDocument(
+        doc_id=doc_id,
+        source=source,
+        content=content,
+        metadata=metadata or {},
+        raw=raw,
+    )
+
+
+def make_ingestion_result(
+    *,
+    document: IngestionDocument | None = None,
+    state: str = "succeeded",
+    timestamp: datetime | None = None,
+    metadata: Mapping[str, Any] | None = None,
+) -> IngestionResult:
+    """Create an :class:`IngestionResult` for adapter tests."""
+
+    return IngestionResult(
+        document=document or make_ingestion_document(),
+        state=state,
+        timestamp=timestamp or datetime.now(timezone.utc),
+        metadata=metadata or {},
+    )
+
+
+def make_chunk_section(
+    name: str = "Background",
+    *,
+    start: int = 0,
+    end: int = 100,
+    loinc_code: str | None = None,
+) -> Section:
+    """Construct a chunking section data structure."""
+
+    return Section(name=name, start=start, end=end, loinc_code=loinc_code)
+
+
+def make_chunk_document(
+    *,
+    doc_id: str = "doc-1",
+    text: str = "Section text",
+    sections: Iterable[Section] | None = None,
+    source_system: str | None = "tests",
+    media_type: str | None = "text/plain",
+) -> ChunkDocument:
+    """Return a semantic chunking document with optional sections."""
+
+    return ChunkDocument(
+        doc_id=doc_id,
+        text=text,
+        sections=list(sections) if sections is not None else [make_chunk_section()],
+        tables=[],
+        source_system=source_system,
+        media_type=media_type,
+    )
+
+
+def make_retrieval_result(
+    *,
+    chunk_id: str = "chunk-1",
+    doc_id: str = "doc-1",
+    text: str = "Matched snippet",
+    title_path: str | None = "Root/Section",
+    section: str | None = "Section",
+    score: float = 1.0,
+    scores: RetrieverScores | None = None,
+    start: int | None = None,
+    end: int | None = None,
+    metadata: Mapping[str, Any] | None = None,
+) -> RetrievalResult:
+    """Produce a retrieval result with consistent score annotations."""
+
+    return RetrievalResult(
+        chunk_id=chunk_id,
+        doc_id=doc_id,
+        text=text,
+        title_path=title_path,
+        section=section,
+        score=score,
+        scores=scores or RetrieverScores(bm25=score),
+        start=start,
+        end=end,
+        metadata=metadata or {},
+    )
+
+
+def make_retrieval_request(
+    *,
+    query: str = "test query",
+    top_k: int = 5,
+    from_: int = 0,
+    filters: Mapping[str, Any] | None = None,
+    intent: str | None = None,
+    rerank_enabled: bool | None = None,
+    explain: bool = False,
+) -> RetrievalRequest:
+    """Return a :class:`RetrievalRequest` with optional filters."""
+
+    return RetrievalRequest(
+        query=query,
+        top_k=top_k,
+        from_=from_,
+        filters=filters or {},
+        intent=intent,
+        rerank_enabled=rerank_enabled,
+        explain=explain,
+    )
+
+
+def make_retrieval_response(
+    *,
+    results: Sequence[RetrievalResult] | None = None,
+    timings: Sequence[RetrieverTiming] | None = None,
+    expanded_terms: Mapping[str, float] | None = None,
+    intent: str = "test",
+    latency_ms: float = 1.0,
+    request: RetrievalRequest | None = None,
+) -> RetrievalResponse:
+    """Build a retrieval response for service doubles."""
+
+    payload_results = list(results) if results is not None else [make_retrieval_result()]
+    payload_timings = list(timings) if timings is not None else [RetrieverTiming(component="stub", duration_ms=latency_ms)]
+    request = request or make_retrieval_request()
+    return RetrievalResponse(
+        results=payload_results,
+        timings=payload_timings,
+        expanded_terms=expanded_terms or {},
+        intent=intent,
+        latency_ms=latency_ms,
+        from_=request.from_,
+        size=len(payload_results),
+        metadata={
+            "from": request.from_,
+            "top_k": request.top_k,
+            "feature_flags": {"rerank_enabled": request.rerank_enabled if request.rerank_enabled is not None else True},
+        },
+    )
+
+
+def make_retrieve_response_model(
+    *,
+    results: Sequence[RetrievalResult] | None = None,
+    query_meta: Mapping[str, Any] | None = None,
+) -> RetrieveResponse:
+    """Create an API-layer RetrieveResponse model from retrieval results."""
+
+    retrieve_results = [
+        RetrieveResult(
+            chunk_id=item.chunk_id,
+            score=item.score,
+            snippet=item.text,
+            facet_types=list(item.metadata.get("facet_types", [])),
+        )
+        for item in (results or [make_retrieval_result()])
+    ]
+    return RetrieveResponse(results=retrieve_results, query_meta=dict(query_meta or {}))
+
+
+def make_error_response_model(
+    *,
+    code: str = "invalid_request",
+    message: str = "Request failed",
+    details: Sequence[tuple[str, str]] | None = None,
+    retriable: bool = False,
+) -> ErrorResponse:
+    """Return a typed error response for API tests."""
+
+    payload = [ErrorDetail(field=field, message=detail) for field, detail in (details or [])]
+    return ErrorResponse(code=code, message=message, details=payload, retriable=retriable)
+
+
+__all__ = [
+    "make_chunk_document",
+    "make_chunk_section",
+    "make_ingestion_document",
+    "make_ingestion_result",
+    "make_retrieval_request",
+    "make_retrieval_response",
+    "make_retrieval_result",
+    "make_retrieve_response_model",
+    "make_error_response_model",
+]
diff --git a/tests/common/mocks.py b/tests/common/mocks.py
new file mode 100644
index 0000000000000000000000000000000000000000..c77aa4f752c0cab85f942fc30ae2a0a28b371373
--- /dev/null
+++ b/tests/common/mocks.py
@@ -0,0 +1,111 @@
+"""Reusable async transports and service doubles for tests."""
+from __future__ import annotations
+
+import asyncio
+from dataclasses import dataclass, field
+from typing import Any, Dict, Mapping, MutableMapping, Sequence
+
+from Medical_KG.ingestion.models import IngestionResult
+from Medical_KG.retrieval.models import RetrievalRequest, RetrievalResponse
+
+@dataclass
+class MockHttpResponse:
+    """Payload configuration for :class:`MockAsyncHttpClient`."""
+
+    json: Mapping[str, Any] | None = None
+    text: str | None = None
+    content: bytes | None = None
+    status_code: int = 200
+
+
+class MockAsyncHttpClient:
+    """Async HTTP client double returning preconfigured payloads."""
+
+    def __init__(self, responses: Mapping[str, MockHttpResponse]) -> None:
+        self._responses: Dict[str, MockHttpResponse] = dict(responses)
+        self.calls: list[tuple[str, Mapping[str, Any] | None]] = []
+
+    async def get_json(
+        self,
+        url: str,
+        *,
+        params: Mapping[str, Any] | None = None,
+        headers: Mapping[str, str] | None = None,
+    ) -> Mapping[str, Any]:
+        self.calls.append((url, params))
+        response = self._responses.get(url)
+        if response is None or response.json is None:
+            raise KeyError(f"No JSON response configured for {url}")
+        return response.json
+
+    async def get_text(
+        self,
+        url: str,
+        *,
+        params: Mapping[str, Any] | None = None,
+        headers: Mapping[str, str] | None = None,
+    ) -> str:
+        self.calls.append((url, params))
+        response = self._responses.get(url)
+        if response is None or response.text is None:
+            raise KeyError(f"No text response configured for {url}")
+        return response.text
+
+    async def get_bytes(
+        self,
+        url: str,
+        *,
+        params: Mapping[str, Any] | None = None,
+        headers: Mapping[str, str] | None = None,
+    ) -> bytes:
+        self.calls.append((url, params))
+        response = self._responses.get(url)
+        if response is None or response.content is None:
+            raise KeyError(f"No bytes response configured for {url}")
+        return response.content
+
+    async def aclose(self) -> None:
+        return None
+
+
+@dataclass
+class StubIngestionAdapter:
+    """Adapter double returning predetermined ingestion results."""
+
+    results: Sequence[IngestionResult] = field(default_factory=tuple)
+    error: Exception | None = None
+    calls: list[tuple[tuple[Any, ...], MutableMapping[str, Any]]] = field(default_factory=list)
+
+    async def run(self, *args: Any, **kwargs: Any) -> list[IngestionResult]:
+        self.calls.append((args, dict(kwargs)))
+        if self.error is not None:
+            raise self.error
+        return list(self.results)
+
+
+@dataclass
+class StubRetrievalService:
+    """Minimal async retrieval service suitable for dependency injection tests."""
+
+    responses: Mapping[str, RetrievalResponse] | None = None
+    default_response: RetrievalResponse | None = None
+    delay: float = 0.0
+    calls: list[RetrievalRequest] = field(default_factory=list)
+
+    async def retrieve(self, request: RetrievalRequest) -> RetrievalResponse:
+        self.calls.append(request)
+        if self.delay > 0:
+            await asyncio.sleep(self.delay)
+        if self.responses is not None and request.query in self.responses:
+            return self.responses[request.query]
+        if self.default_response is not None:
+            return self.default_response
+        raise KeyError(f"No retrieval response configured for query '{request.query}'")
+
+
+__all__ = [
+    "MockAsyncHttpClient",
+    "MockHttpResponse",
+    "StubIngestionAdapter",
+    "StubRetrievalService",
+]
diff --git a/tests/conftest.py b/tests/conftest.py
index 568e37e76907b71b506f391ca055843f7e35d7a7..665be074dc7c8ae9b6061eb15b0a66daba98209d 100644
--- a/tests/conftest.py
+++ b/tests/conftest.py
@@ -1,107 +1,17 @@
 from __future__ import annotations

-import ast
-import os
-import sys
-import threading
-from collections import defaultdict
 from pathlib import Path
-from trace import Trace
+import sys

 import pytest

-@pytest.fixture
-def monkeypatch_fixture(monkeypatch: pytest.MonkeyPatch) -> pytest.MonkeyPatch:
-    return monkeypatch
-
 ROOT = Path(__file__).resolve().parents[1]
 SRC = ROOT / "src"
-PACKAGE_ROOT = SRC / "Medical_KG"
-TARGET_COVERAGE = float(os.environ.get("COVERAGE_TARGET", "0.95"))

 if str(SRC) not in sys.path:
     sys.path.insert(0, str(SRC))

-_TRACE = Trace(count=True, trace=False)
-
-def _activate_tracing() -> None:  # pragma: no cover - instrumentation only
-    sys.settrace(_TRACE.globaltrace)
-    threading.settrace(_TRACE.globaltrace)
-
-
-if os.environ.get("DISABLE_COVERAGE_TRACE") != "1":
-    _activate_tracing()
-

-def pytest_sessionfinish(session: pytest.Session, exitstatus: int) -> None:  # pragma: no cover - instrumentation only
-    sys.settrace(None)
-    threading.settrace(None)
-    if os.environ.get("DISABLE_COVERAGE_TRACE") == "1":
-        return
-    results = _TRACE.results()
-    executed: dict[Path, set[int]] = defaultdict(set)
-    for (filename, lineno), count in results.counts.items():
-        if count <= 0:
-            continue
-        path = Path(filename)
-        try:
-            path = path.resolve()
-        except OSError:
-            continue
-        if PACKAGE_ROOT not in path.parents and path != PACKAGE_ROOT:
-            continue
-        executed[path].add(lineno)
-
-    missing: dict[Path, set[int]] = {}
-    per_file_coverage: list[tuple[Path, float]] = []
-    total_statements = 0
-    total_covered = 0
-
-    for py_file in PACKAGE_ROOT.rglob("*.py"):
-        statements = _statement_lines(py_file)
-        if not statements:
-            continue
-        executed_lines = executed.get(py_file.resolve(), set())
-        covered = statements & executed_lines
-        uncovered = statements - covered
-        rel_path = py_file.relative_to(ROOT)
-        per_file_coverage.append(
-            (
-                rel_path,
-                len(covered) / len(statements) if statements else 1.0,
-            )
-        )
-        total_statements += len(statements)
-        total_covered += len(covered)
-        if uncovered:
-            missing[rel_path] = uncovered
-
-    overall = total_covered / total_statements if total_statements else 1.0
-
-    if missing:
-        details = "; ".join(
-            f"{path}:{','.join(str(line) for line in sorted(lines))}" for path, lines in sorted(missing.items())
-        )
-        (ROOT / "coverage_missing.txt").write_text(details, encoding="utf-8")
-    else:
-        coverage_file = ROOT / "coverage_missing.txt"
-        if coverage_file.exists():
-            coverage_file.unlink()
-
-    if overall + 1e-9 < TARGET_COVERAGE:
-        lowest = sorted(per_file_coverage, key=lambda item: item[1])[:5]
-        summary = ", ".join(f"{path}={pct:.1%}" for path, pct in lowest)
-        pytest.fail(
-            f"Statement coverage {overall:.1%} below target {TARGET_COVERAGE:.0%}. "
-            f"Lowest files: {summary}"
-        )
-
-
-def _statement_lines(path: Path) -> set[int]:
-    source = path.read_text(encoding="utf-8")
-    tree = ast.parse(source, filename=str(path))
-    lines: set[int] = set()
-    for node in ast.walk(tree):
-        if isinstance(node, ast.stmt):
-            lines.add(node.lineno)
-    return lines
+@pytest.fixture
+def monkeypatch_fixture(monkeypatch: pytest.MonkeyPatch) -> pytest.MonkeyPatch:
+    return monkeypatch
diff --git a/tests/infrastructure/test_common_helpers.py b/tests/infrastructure/test_common_helpers.py
new file mode 100644
index 0000000000000000000000000000000000000000..ecb3e49d28c4eb93cd6ee6deef6c2018e9b59fe3
--- /dev/null
+++ b/tests/infrastructure/test_common_helpers.py
@@ -0,0 +1,99 @@
+from __future__ import annotations
+
+import asyncio
+
+import pytest
+
+from Medical_KG.retrieval.models import RetrievalRequest
+from tests.common import (
+    MockAsyncHttpClient,
+    MockHttpResponse,
+    StubIngestionAdapter,
+    StubRetrievalService,
+    make_ingestion_result,
+    make_retrieval_request,
+    make_retrieval_response,
+)
+
+
+def test_mock_http_client_returns_configured_payload() -> None:
+    client = MockAsyncHttpClient({
+        "https://example.com/json": MockHttpResponse(json={"ok": True}),
+        "https://example.com/text": MockHttpResponse(text="payload"),
+        "https://example.com/bytes": MockHttpResponse(content=b"data"),
+    })
+
+    async def _run() -> None:
+        assert await client.get_json("https://example.com/json") == {"ok": True}
+        assert await client.get_text("https://example.com/text") == "payload"
+        assert await client.get_bytes("https://example.com/bytes") == b"data"
+
+    asyncio.run(_run())
+    assert [call[0] for call in client.calls] == [
+        "https://example.com/json",
+        "https://example.com/text",
+        "https://example.com/bytes",
+    ]
+
+
+def test_mock_http_client_missing_payload_raises() -> None:
+    client = MockAsyncHttpClient({})
+
+    async def _run() -> None:
+        with pytest.raises(KeyError):
+            await client.get_json("https://missing")
+
+    asyncio.run(_run())
+
+
+def test_stub_ingestion_adapter_returns_results() -> None:
+    result = make_ingestion_result()
+    adapter = StubIngestionAdapter(results=[result])
+
+    async def _run() -> None:
+        payload = await adapter.run(limit=1)
+        assert payload == [result]
+
+    asyncio.run(_run())
+    assert adapter.calls == [((), {"limit": 1})]
+
+
+def test_stub_ingestion_adapter_raises_when_configured() -> None:
+    adapter = StubIngestionAdapter(error=RuntimeError("boom"))
+
+    async def _run() -> None:
+        with pytest.raises(RuntimeError):
+            await adapter.run()
+
+    asyncio.run(_run())
+
+
+def test_stub_retrieval_service_returns_mapping() -> None:
+    request = make_retrieval_request(query="heart failure")
+    response = make_retrieval_response(request=request)
+    service = StubRetrievalService(responses={"heart failure": response})
+
+    async def _run() -> None:
+        payload = await service.retrieve(request)
+        assert payload is response
+
+    asyncio.run(_run())
+    assert service.calls == [request]
+
+
+def test_stub_retrieval_service_uses_default_response() -> None:
+    default = make_retrieval_response()
+    service = StubRetrievalService(default_response=default)
+    request = RetrievalRequest(query="fallback")
+
+    async def _run() -> None:
+        payload = await service.retrieve(request)
+        assert payload is default
+
+    asyncio.run(_run())
+
+    async def _missing() -> None:
+        with pytest.raises(KeyError):
+            await StubRetrievalService().retrieve(request)
+
+    asyncio.run(_missing())

EOF
)
